<?xml version="1.0" encoding="UTF-8"?>
<unload unload_date="2025-04-29 20:40:26">
<sys_ui_page action="INSERT_OR_UPDATE">
<category>general</category>
<client_script><![CDATA[function filterDropdown() {
    const input = document.getElementById("si_filter");
    const filter = input.value.toUpperCase();
    const select = document.getElementById("si_select");
    const options = select.options;

    for (let i = 0; i < options.length; i++) {
        const txtValue = options[i].textContent || options[i].innerText;
        if (txtValue.toUpperCase().indexOf(filter) > -1 || options[i].value.toUpperCase().indexOf(filter) > -1) {
            options[i].style.display = "";
        } else {
            options[i].style.display = "none";
        }
    }
}

function downloadDoc(format) {
    const docOutput = document.getElementById('doc_output');
    let content = '';
    let filename = 'script_include_doc';
    let mimeType = '';

    if (format === 'md') {
        // Basic Markdown conversion (you might want to improve this)
        content = '# ' + (document.querySelector('#doc_output h3')?.innerText || '') + '\n\n';
        content += '**Description:** ' + (docOutput.querySelector('p strong')?.nextSibling?.textContent?.trim() || 'No description') + '\n\n';
        docOutput.querySelectorAll('h4').forEach(h4 => {
            content += '## ' + h4.innerText + '\n';
            let ul = h4.nextElementSibling;
            if (ul && ul.tagName === 'UL') {
                ul.querySelectorAll('li').forEach(li => {
                    content += '- **' + li.querySelector('b')?.innerText + '**(' + li.querySelector('b')?.nextSibling?.textContent?.split('(')[1]?.split(')')[0] + ')\n';
                    content += '  ```javascript\n  ' + li.querySelector('pre')?.innerText + '\n  ```\n\n';
                });
            }
        });
        filename += '.md';
        mimeType = 'text/markdown';
    } else if (format === 'txt') {
        content = docOutput.innerText;
        filename += '.txt';
        mimeType = 'text/plain';
    } else if (format === 'json') {
        const docData = {
            name: document.querySelector('#doc_output h3')?.innerText || '',
            description: docOutput.querySelector('p strong')?.nextSibling?.textContent?.trim() || 'No description',
            functions: []
        };
        docOutput.querySelectorAll('li').forEach(li => {
            docData.functions.push({
                name: li.querySelector('b')?.innerText,
                params: li.querySelector('b')?.nextSibling?.textContent?.split('(')[1]?.split(')')[0]?.split(',').map(p => p.trim()) || [],
                doc: li.querySelector('pre')?.innerText
            });
        });
        content = JSON.stringify(docData, null, 2); // Pretty print JSON
        filename += '.json';
        mimeType = 'application/json';
    }

    const blob = new Blob([content], {
        type: mimeType
    });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = filename;
    link.click();
}

function toggleView(view) {
        var docView = document.getElementById('doc_view');
        var codeBlock = document.getElementById('code_block');
        var functionInsights = document.getElementById('function_insights');
        var qualityScore = document.getElementById('quality_score');

        var viewDocBtn = document.querySelector('button[onclick="toggleView(\'doc\')"]');
        var viewCodeBtn = document.querySelector('button[onclick="toggleView(\'code\')"]');

        if (view === 'doc') {
            docView.style.display = 'block';
            codeBlock.style.display = 'none';
            functionInsights.style.display = 'block';
            qualityScore.style.display = 'block';
            
        } else if (view === 'code') {
            docView.style.display = 'none';
            codeBlock.style.display = 'block';
            functionInsights.style.display = 'none';
            qualityScore.style.display = 'none';

        }
    }


function loadExternalUsage(functionName) {
    var siName = document.getElementById('si_select').value; // dynamic selection
    var ga = new GlideAjax('ScriptIncludeDocGen');
    ga.addParam('sysparm_name', 'getFunctionExternalUsage');
    ga.addParam('sysparm_function_name', functionName);
    ga.addParam('sysparm_script_include_name', siName);
    ga.getXMLAnswer(function(response) {
        if (!response || response === "null") {
            document.getElementById('external_usage_' + functionName).innerHTML = '<li>No external usage found.</li>';
            return;
        }

        var usageData;
        try {
            usageData = JSON.parse(response);
        } catch (e) {
            document.getElementById('external_usage_' + functionName).innerHTML = '<li>Error reading usage info.</li>';
            return;
        }

        var usageHTML = '';
        if (usageData.results && usageData.results.length) {
            usageData.results.forEach(function(usage) {
                usageHTML += '<li>' +
                    (usage.name || 'Unnamed') + ' (' + usage.table + ') ' +
                    '(Count: ' + usage.matchCount + ') ' +
                    '- <a href="' + usage.table + '.do?sys_id=' + usage.sys_id + '" target="_blank">View</a>' +
                    '</li>';
            });
        } else {
            usageHTML = '<li>No external usage found.</li>';
        }

        document.getElementById('external_usage_' + functionName).innerHTML = usageHTML;
		
        // Update the total references dynamically in the placeholder span
        var totalReferencesElement = document.getElementById('total_references_' + functionName.replace(/[^a-zA-Z0-9_-]/g, '_'));
        if (totalReferencesElement) {
            totalReferencesElement.textContent = usageData.totalCount;
        }
    });
}

function calculateDocScore(functions) {
    if (!functions || functions.length === 0) {
        return {
            score: 0,
            feedback: 'Score: 0% ‚Äì No functions found to analyze.'
        };
    }

    let total = functions.length;
    let documented = 0;
    let detailed = 0;
    let hasParamTags = 0;
    let todoCount = 0;

    functions.forEach(fn => {
        if (fn.doc && fn.doc.trim() !== "") {
            documented++;
            if (fn.doc.length > 40) detailed++;
            if (/@param/.test(fn.doc)) hasParamTags++;
            if (fn.doc.includes("TODO")) todoCount++;
        } else {
            todoCount++;
        }
    });

    var docCoverage = documented / total;
    var detailScore = detailed / total;
    var paramScore = hasParamTags / total;
    var todoPenalty = Math.min(todoCount * 5, 30); // Cap penalty at 30%

    let rawScore = (docCoverage * 0.4 + detailScore * 0.3 + paramScore * 0.2) * 100;
    let finalScore = Math.max(0, Math.round(rawScore - todoPenalty));

    let feedback = `Score: ${finalScore} ` +
        (finalScore >= 90 ? 'Excellent!' :
            finalScore >= 70 ? 'Pretty good!' :
            finalScore >= 50 ? 'Getting there.' : 'Needs serious improvement.');

    let missing = total - documented;
    if (missing > 0) {
        feedback += ` Document ${missing} more function${missing > 1 ? 's' : ''} to boost the score.`;
    }

    return {
        score: finalScore,
        feedback
    };
}

function expandAllFunctions() {
    var functionDivs = document.querySelectorAll('[id^="fn_"]');
    functionDivs.forEach(function(div) {
        div.style.display = 'block';
    });
}

function collapseAllFunctions() {
    var functionDivs = document.querySelectorAll('[id^="fn_"]');
    functionDivs.forEach(function(div) {
        div.style.display = 'none';
	});
}]]></client_script>
<description>Main UI page for DocGen UI</description>
<direct>false</direct>
<endpoint>x_754229_docgen_ui_ScriptIncludeDocGenUI.do</endpoint>
<html><![CDATA[<j:jelly xmlns:j="jelly:core" xmlns:g="glide" xmlns:gs="glide.script">

    <!-- Stylesheet call-->

    <g:evaluate>
        var css = new GlideRecord("content_css");
        css.addQuery("name", "DocGenStyle");
        css.query()
        css.next();
        var cssid = ""+css.sys_id;
    </g:evaluate>

    <link href="${cssid}.cssdbx?" rel="stylesheet" type="text/css" />


    <!-- Sticky Top Bar -->
    <div id="top_bar">
        <input type="text" id="si_filter" onkeyup="filterDropdown()" placeholder="]]>üîç<![CDATA[ Filter Script Includes..."> </input>
        <select id="si_select" onchange="loadDoc()">
            <option value="">-- Select Script Include --</option>
        </select>

        <!-- Export Buttons -->
        <button id="exportBtn" onclick="downloadDoc('md')" style="display:none; margin-left: 10px;">]]>üì•<![CDATA[ Export as Markdown</button>
        <button id="exportTextBtn" onclick="downloadDoc('txt')" style="display:none; margin-left: 10px;">]]>üìù<![CDATA[ Export as Text</button>
        <button id="exportJsonBtn" onclick="downloadDoc('json')" style="display:none; margin-left: 10px;">]]>üß©<![CDATA[ Export as JSON</button>
        <button onclick="toggleView('doc')">]]>üìÑ<![CDATA[ View Documentation</button>
        <button onclick="toggleView('code')">]]>üë®<![CDATA[‚Äç]]>üíª<![CDATA[ View Raw Code</button>
    </div>

    <!-- Documentation Quality Score -->
    <div class="card-section" id="quality_score" style="display:none;">
        <h3>]]>üìà<![CDATA[ Documentation Quality Score</h3>
    </div>

	
    <!-- Documentation Area -->
    <div class="card-section" id="doc_view" style="display: block;">
        <h3>]]>üìÑ<![CDATA[ Documentation</h3>
    </div>

	<!-- Function Collapsable functionality-->
    <div id="function_controls" style="margin-bottom:10px;">
        <button onclick="expandAllFunctions()">‚ûï Expand All</button>
        <button onclick="collapseAllFunctions()">‚ûñ Collapse All</button>
    </div>

    <!-- Function Usage Insights -->
    <div class="card_section" id="function_insights" style="display:none;">
        <h3>]]>üìä<![CDATA[ Function Usage Insights</h3>
        <ul id="insight_list"></ul>
    </div>

    <!-- Raw Code View-->
    <div class="card-section" id="code_block" style="display:none;">
        <h3>]]>üë®<![CDATA[‚Äç]]>üíª<![CDATA[ Raw Script Code</h3>
        <pre> <code id="code_view" style="white-space:pre;"></code></pre>
    </div>

    <!-- Hidden doc_output (legacy support) -->
    <div id="doc_output" style="display:none;"></div>

    
    <!-- Scripts -->
    <script>
        function loadDropdown() {
            var ga = new GlideAjax('ScriptIncludeDocGen');
            ga.addParam('sysparm_name', 'getScriptIncludeNames');
            ga.getXMLAnswer(function(response) {
                var names = JSON.parse(response);
                var select = document.getElementById('si_select');
                names.forEach(function(name) {
                    var option = document.createElement('option');
                    option.value = name;
                    option.textContent = name;
                    select.appendChild(option);
                });

                // Initial filtering (optional, to handle pre-filled search)
                filterDropdown();
            });
        }

        function loadDoc() {
            var name = document.getElementById('si_select').value;
            if (!name) return;
            document.getElementById('doc_view').innerHTML = '';
            document.getElementById('code_view').textContent = '';
            document.getElementById('doc_output').innerHTML = '';
            document.getElementById('function_insights').style.display = 'none';

            var ga = new GlideAjax('ScriptIncludeDocGen');
            ga.addParam('sysparm_name', 'getScriptIncludeDoc');
            ga.addParam('sysparm_script_include_name', name);
            ga.getXMLAnswer(function(response) {
                var doc = JSON.parse(response);
                var html = '<h3>' + doc.name + '</h3>';
                html += '<p><strong>Description:</strong> ' + (doc.description || 'No description added to the script include') + '</p>';
                if (doc.functions.length) {
                    html += '<h4>Functions:</h4>';
                    doc.functions.forEach(function(fn) {
                        var fnId = 'fn_' + fn.name;
                        html += '<button class="function-toggle" onclick="toggleFunction(\'' + fnId + '\')">‚û§ ' + fn.name + '(' + fn.params.join(', ') + ')</button>';
                        html += '<div id="' + fnId + '" style="display:none;">';
                        html += '<pre><code>' + (fn.doc || '// No documentation found') + '</code></pre>';
                        html += '</div>';
                    });
                } else {
                    html += '<p>No documented functions found. Ensure functions are preceded by a /** ... */ block.</p>';
                }

                //Show Export Buttons
                document.getElementById('exportBtn').style.display = 'inline-block';
                document.getElementById('exportTextBtn').style.display = 'inline-block';
                document.getElementById('exportJsonBtn').style.display = 'inline-block';

                //Show the copy button
                document.getElementById('doc_view').innerHTML = html;
                document.getElementById('code_view').textContent = doc.code;

                // Function Usage Section
                var usageHTML = '';
                if (doc.functions.length) {
                    doc.functions.forEach(function(fn) {
                        usageHTML += '<li style="margin-bottom: 15px;">';
                        usageHTML += '<div><strong>' + fn.name + '</strong>: used <strong><span id="total_references_' + fn.name + '">Loading...</span></strong> times</div>';
                        usageHTML += '<button onclick="toggleExternalUsage(\'' + fn.name + '\')">';
                        usageHTML += '<span id="chevron_external_' + fn.name + '" class="chevron">&#9654;</span> ';
                        usageHTML += '<span id="text_external_' + fn.name + '">Show External Usage</span>';
                        usageHTML += '</button>';

                        usageHTML += '<ul id="external_usage_' + fn.name + '" style="display:none;" data-loaded="false"></ul>';
                        usageHTML += '</li>'
                    });
                    document.getElementById('insight_list').innerHTML = usageHTML;
                    document.getElementById('function_insights').style.display = 'block';
                }
                document.getElementById('doc_output').innerHTML = html;

                // Documentation Quality Score
                var scoreInfo = calculateDocScore(doc.functions);
                document.getElementById("quality_score").innerHTML = '<h3>]]>üìà<![CDATA[ Documentation Quality Score</h3><p>' + scoreInfo.feedback + '</p>';
                document.getElementById("quality_score").style.display = "block";
                toggleView('doc');
            });
        }

        function toggleFunction(id) {
            var el = document.getElementById(id);
            if (el.style.display === 'none') {
                el.style.display = 'block';
            } else {
                el.style.display = 'none';
            }
        }

        function toggleExternalUsage(functionName) {
            var list = document.getElementById('external_usage_' + functionName);
            var chevron = document.getElementById('chevron_external_' + functionName);
            var text = document.getElementById('text_external_' + functionName);

            if (list.style.display === 'none') {
                list.style.display = 'block';
                chevron.innerHTML = '&#9660;'; // Down arrow
                text.innerText = 'Hide External Usage';

                if (list.getAttribute('data-loaded') !== 'true') {
                    loadExternalUsage(functionName);
                    list.setAttribute('data-loaded', 'true');
                }
            } else {
                list.style.display = 'none';
                chevron.innerHTML = '&#9654;'; // Right arrow
                text.innerText = 'Show External Usage';
            }
        }

        window.onload = loadDropdown;
    </script>

</j:jelly>]]></html>
<name>ScriptIncludeDocGenUI</name>
<processing_script/>
<sys_class_name>sys_ui_page</sys_class_name>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-04-21 03:47:58</sys_created_on>
<sys_id>c03327d1c34d6210eb96becdd40131e7</sys_id>
<sys_mod_count>103</sys_mod_count>
<sys_name>ScriptIncludeDocGenUI</sys_name>
<sys_package display_value="DocGen UI" source="x_754229_docgen_ui">b50d5799c30d6210eb96becdd40131cb</sys_package>
<sys_policy>read</sys_policy>
<sys_scope display_value="DocGen UI">b50d5799c30d6210eb96becdd40131cb</sys_scope>
<sys_update_name>sys_ui_page_c03327d1c34d6210eb96becdd40131e7</sys_update_name>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-04-29 20:40:12</sys_updated_on>
</sys_ui_page>
</unload>
